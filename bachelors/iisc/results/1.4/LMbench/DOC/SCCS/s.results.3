h49332
s 00023/00034/00058
d D 1.2 00/12/11 15:53:54 staelin 3 2
c - Major rewrite of man pages
cC
cHhpli8.hpli.hpl.hp.com
cK31507
cZ+02:00
e
s 00092/00000/00000
d D 1.1 98/05/07 16:00:26 staelin 2 1
c results.3 created on 98/05/07 16:00:26 by staelin@hpisc8.lempel
cC
cK32486
cPdoc/results.3
e
s 00000/00000/00000
d D 1.0 98/05/07 09:00:25 staelin 1 0
cBlm@lm.bitmover.com|ChangeSet|20000131225335|47351|--LMBENCH--
cHhpisc8.lempel
cK06737
cP/users/staelin/src/lmbench/doc/results.3
cR95a37785bda67a80
cV4
cX0x21
cZ-07:00
e
u
U
f e 0
f x 0x21
t
T
I 2
.\"
.\" @(#)results.man	2.0 98/04/24
.\"
.\"   results - lmbench results subsystem
.\"
.\"   Copyright (C) 1998  Carl Staelin and Larry McVoy
.\"   E-mail: staelin@hpl.hp.com
.\"
D 3
.TH "lmbench result management" 3 "$Date:$" "(c)1998 Larry McVoy" "LMBENCH"

E 3
I 3
.TH "lmbench result management" 3 "$Date$" "(c)1998 Larry McVoy" "LMBENCH"
E 3
.SH "NAME"
insertinit, insertsort, get_results, set_results, save_median, save_minimum
	\- the lmbench results subsystem
D 3

E 3
.SH "SYNOPSIS"
D 3
.B "#include ``lmbench.h''"
.LP
.B "#define TRIES 11"
.LP
.B "typedef struct { int N; uint64 u[TRIES], n[TRIES] } result_t;"
.LP
.B "void	insertinit(result_t *r)"
.LP
.B "void	insertsort(uint64 u, uint64 n, result_t *r)"
.LP
.B "void	get_results(result_t *r)"
.LP
.B "void	set_results(result_t *r)"
.LP
.B "void	save_median()"
.LP
.B "void	save_minimum()"

E 3
I 3
.ft C
#include "lmbench.h"
.br
#define TRIES 11
.br
typedef struct { int N; uint64 u[TRIES], n[TRIES] } result_t;
.br
void	insertinit(result_t *r);
.br
void	insertsort(uint64 u, uint64 n, result_t *r);
.br
void	get_results(result_t *r);
.br
void	set_results(result_t *r);
.br
void	save_median();
.br
void	save_minimum();
.ft R
E 3
.SH "DESCRIPTION"
These routines provide some simple data management functionality.
In most cases, you will not need these routines.
D 3
.LP
E 3
I 3
.P
E 3
The current timing results can be accessed using the routines in
timing(3).  The current timing results may be modified using 
.B save_median 
and 
.BR save_minimum .  
D 3

E 3
.TP
.B "void	insertinit(result_t *r)"
initializes the results array.
D 3

E 3
.TP
.B "void	insertsort(uint64 u, uint64 n, result_t *r)"
insert 
.I u 
and 
.I n 
into 
.IR r .  
Results are sorted in decreasing order by 
.IR u/n .
D 3

E 3
.TP
.B "void	get_results(result_t *r)"
get a copy of the current results.
D 3

E 3
.TP
.B "void	set_results(result_t *r)"
save a copy 
.I r 
as the current results.
D 3

E 3
.TP
.B "void	save_median()"
sets the timing results to the median of the current results.
D 3

E 3
.TP
.B "void	save_minimum()"
sets the timing restuls to the minimum of the current results.
D 3

.LP
E 3
I 3
.P
E 3
Results are sorted in ascending order, so the minimum value is at 
.B TRIES-1
and the maximum value is at
.BR 0 .
D 3

E 3
.SH "FUTURES"
Development of \fIlmbench\fR is continuing.  
D 3

E 3
.SH "SEE ALSO"
D 3
lmbench(8), lmbench(3), reporting(3), results(3)

E 3
I 3
lmbench(8), lmbench(3), timing(3), reporting(3).
E 3
.SH "AUTHOR"
Carl Staelin and Larry McVoy
.PP
Comments, suggestions, and bug reports are always welcome.
E 2
I 1
E 1
