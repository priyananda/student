h39815
s 00001/00001/00043
d D 1.3 00/12/11 16:12:49 staelin 4 3
c - Add new relevant entries to "SEE ALSO" section
cC
cK61703
e
s 00001/00001/00043
d D 1.2 00/12/11 15:50:41 staelin 3 2
c - Add information to "SEE ALSO" section
cC
cHhpli8.hpli.hpl.hp.com
cK58723
cZ+02:00
e
s 00044/00000/00000
d D 1.1 94/11/18 01:26:35 lm 2 1
c Initial revision
cC
cK58719
e
s 00000/00000/00000
d D 1.0 94/11/18 01:26:34 lm 1 0
cBlm@lm.bitmover.com|ChangeSet|20000131225335|47351|--LMBENCH--
cHlm.bitmover.com
cK03886
cPdoc/lat_proc.8
cRea79d2afffceab
cV4
cX0x21
cZ-08:00
e
u
U
f e 0
f x 0x21
t
lmbench doc checkin
T
I 2
.\" $Id$
.TH LAT_PROC 8 "$Date$" "(c)1994 Larry McVoy" "LMBENCH"
.SH NAME
lat_proc \- process creation tests
.SH SYNOPSIS
.B lat_proc
.SH DESCRIPTION
.B lat_proc
creates processes in three different forms, each more expensive than the last.
The purposes is to measure the time that it takes to create a basic thread
of control.
D 3
.LP
E 3
I 3
.PP
E 3
The forms are listed and described below:
.TP 20
Process fork+exit
The time it takes to split a process into two (nearly) identical copies
and have one exit.  This is how new processes are created but is not 
very useful since both processes are doing the same thing.
.TP
Process fork+execve
The time it takes to create a new process and have that new process run a new
program.  This is the inner loop of all shells (command interpreters).
.TP
Process fork+/bin/sh -c
The time it takes to create a new process and have that new process run a new
program by asking the system shell to find that program and run it.  This is
how the C library interface called \f(CBsystem\fP is implemented.  It is the
most general and the most expensive.
.SH OUTPUT
Output is in microseconds per operation like so:
.sp
.ft CB
.nf
Process fork+exit: 6054 microseconds
Process fork+execve: 11212 microseconds
Process fork+/bin/sh -c: 44346 microseconds
.br
.fi
.ft
.SH ACKNOWLEDGEMENT
Funding for the development of
this tool was provided by Sun Microsystems Computer Corporation.
.SH "SEE ALSO"
D 4
lmbench(8).
E 4
I 4
lmbench(8), fork(2), execlp(2), execve(2), wait(2).
E 4
E 2
I 1
E 1
