UNIX Programming Lab


1. 

a)	Write a non-recursive shell script which accepts any number of arguments and prints them in the reverse order. (For example, if the script is named rargs, then executing rags A B C should produce C B A on the standard output).
b)	Write a C program that creates a child process to read commands from the standard input and execute them ( a minimal implementation of a shell-like program). You can assume that no arguments will be passed to the commands to be executed.

2. 
a)	Write a shell script that accepts two file names as arguments, checks if the permissions for these files are identical and if the permissions are identical, outputs common permissions, and otherwise outputs each file name followed by its permissions.
b)	Write a C program to create a file with 16 bytes of arbitrary data from the beginning and another 16 bytes of arbitrary data from an offset of 48. Display the file contents to demonstrate how the hole in the file is handled.

3. 
a)	Write a shell function that takes a valid directory name as an argument and recursively descends all the subdirectories, finds the maximum length of any file in that hierarchy and writes this maximum value to the standard output.
b)	Write a C program which accepts valid file names as command-line arguments and for each of the arguments, prints the type of the file (regular file, directory file, character special file, block special file, symbolic link etc).

4.
a)	Write a shell script that accepts a path name and creates all the components in that path name as directories. For example, if the script is named mpc, then the command mpc a/b/c/d should create directories a, a/b, a/b/c, a/b/c/d.
b)	Write a C program which accepts one command-line argument, executes the argument as a shell command, determines the taken by it and prints the timing values. Use the "times" function and the "tms" structure. The code need not include error checking.

5.
a)	Write a shell which accepts valid log-in names as arguments and prints their corresponding home directories. If no arguments are specified, print a suitable error message.
b)	Write a C program which accepts a valid directory name as a command-line argument and lists all the files in the given directory as well as all the files in the subsequent sub directories. (The solution can be recursive or non-recursive).




6. 
a)	Write a shell script to implement terminal locking (similar to the lock command). It should prompt the user for a password. After accepting the password entered by the user, it must prompt again for the matching password as confirmation and if match occurs, it must lock the keyboard until a matching a password is entered again by the user. Note that the script must be written to disregard BREAK, Control-D etc. No time limit need by implemented for the lock duration.
b)	Write a C program to prompt the user for the name of an environment variable and print its value if it is defined and a suitable message otherwise; and to repeat the process if user wants it.

7.
a)	Write a shell script that accepts file names specified as arguments and creates a shell script that contains these files as well as the code to recreate these files. Thus if the script generated by your script is executed, it would recreate the original files. (This is same as the 'bundle' script describe by Brain. W. Dernighan and Rob Pike in "The UNIX Programming Environment". Prentice-Hall India).
b)	Write an awk script to delete duplicated lines from a text file. The order of the original lines must remain unchanged.

8. 
a)	Write a shell that finds and displays all the links to a file specified as the first argument to the script. The second argument, which is optional can be used to specify the directory in which the search is to begin. If this second argument is not present, the search is to begin in current working directory. In either case, the starting directory as well as all its subdirectories at all levels must be searched. The script need not include any error checking.
b)	Write a PERL script which echoes its command-line arguments, one per line after translating all lower-case letters to upper-case.

9.
a)	Write shell script to display the calendar for current month with current date replaced by * or ** depending on whether the date has one digit or two digits.
b)	Write a PERL program to convert an unsigned binary number ( supplied as argument) to decimal (for example, if the argument is 10110, the output should be 22). If an argument is present, it can be assumed to be a valid binary number and if no argument is present, the program should display an error message

10.
a)	Write an awk script that folds long lines into 40 columns. Thus any line the exceeds 40 characters must be broken after 40th; a\ is to be appended as the indication of folding and the processing is to be continued with the residue. The input is to be supplied through a text file created by the user.
b)	Write a C program to do the following:
Using fork(), create a child process. The child process prints its own process id and the id of its parent and then exits. The parent process waits for its child to finish (by executing the wait()) and then prints its own process id and the id of its child process; and then exits.




11.
a)	Write the HTML code to generate a web page that displays a COMBO box with a choice of 4 names. Embed a PERL script into this HTML code to extract the name selected by the user, remove any spaces in the name, convert to lower-case and then display the result in a text box. The page is to be viewed using suitable browser.
b)	Write a C program that accepts a file descriptor as the single command-line argument and then prints a description of the file flags for that descriptor. Use the fcntl() function. The program should check for invalid number of arguments and error return from fcntl() function.

12.
a)	Write an awk script that accepts date argument in the form of mm-dd-yy and displays it in the form of day month, year. The script should check the validity of the argument and in the case of error, display a suitable message.
b)	Write a PERL program that reads two lines of words, stores the words from each line in separate hash, and the prints a sorted list of words, with each word followed by the message "Only in Line1", or Only in Line2", or "Both in Line1 and Line2", as appropriate.

13.
a)	Write a PERL program to recognize palindromes. The program must handle one letter words (trivially palindromes) and be permissive with white space and punctuation (for example, "Satan, Oscillate my metallic sonatas" is to be recognized as palindrome).
b)	Write an awk script to read the /etc/passwd file and list users who have duplicate user ID numbers.

14.
a)	Write a PERL program to determine word frequencies using associative arrays, in a given paragraph of text. You can assume that the paragraph begins with a word, (not with white space) and that there are no hyphenated words. Words capitalized differently should be treated as same words.
b)	Write a C program to print the device number for each command-line argument. Additionally, if the argument refers to a character special file or a block special file, its st-rdev value also is to be printed.

15.
a)	Write a shell script to do the following: It accepts two file names as arguments, sorts both to temporary files, merges the sorted files to the standard output, and finally deletes the temporary files.
b)	Write an awk program to print the transpose of a matrix.
For example assume the awk program is named revtab. The
$cat, mat1
A B C
D E F
G H I
$ revtab mat1
A D G
B E H
C F I
$
abcd
