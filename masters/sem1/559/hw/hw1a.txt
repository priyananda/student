picproc - picture processor
CS 559 Fall 2007 - Project 1
priyananda shenoy ( shenoy@cs.wisc.edu )
Written Assignment

Question #1:
f = [ 1 2 1 3 1 4 1 5 1 6 2 5 3 4 3 ]
g = 1/5 [1 1 1 1 1]
h = 1/6 [1 2 3]

1.A f*g
  [ 1/5 3/5 4/5 7/5 8/5 11/5 2 14/5 12/5 17/5 3 19/5 17/5 4 17/5 3 2 7/5 3/5 ]
1.B f*h
  [ 1/2 4/3 4/3 13/6 5/3 17/6 2 7/2 7/3 25/6 19/6 25/6 7/2 23/6 10/3 5/3 1/2 ]
1.C f*g*h
  [ 1/10 11/30 19/30 16/15 7/5 28/15 2 73/30 37/15 89/30 91/30 52/15 52/15 113/30 18/5 33/10 77/30 28/15 11/10 13/30 1/10 ]
1.D f*g with zero padding
  [ 4/5 7/5 8/5 11/5 2 14/5 12/5 17/5 3 19/5 17/5 4 17/5 3 2 ]
1.E f*g with reflection
  [ 7/5 8/5 8/5 11/5 2 14/5 12/5 17/5 3 19/5 17/5 4 17/5 18/5 17/5 ]
1.F f*g with kernel renomalization
  [ 4/3 7/4 8/5 11/5 2 14/5 12/5 17/5 3 19/5 17/5 4 17/5 15/4 10/3 ]



Question #2:
f = [ 1 2 1 3 1 2 2 ]
resampling at [1.5,2,3.25]

2.A box with r = 1/2
  [ 2 1 3]
2.B tent with r = 1/2
  [ 3/2 1 5/2 ]
2.C box with r = 1
  [ 3 4 4 ]
2.D tent with r = 1
  [ 13/4 7/2 31/8 ]



Question #3:
  The original signal is 
  [ 0 0 4 4 0 0 4 0 4 0 4 0 0 0 4 0 0 0 ]
  After prefiltering the signal is
  [0 1 3 3 1 1 2 2 2 2 2 1 0 1 2 1 0 0]
3.A resample at 1/2 the rate - pick even samples
  [0 3 1 2 2 2 0 2 0]
3.B resample at 1/2 the rate - pick odd samples
  [1 3 1 2 2 1 1 1 0] 

  Picking even samples or odd samples gives similar
signals. So the width of the kernel is (just) adequate.
  
3.C resample at 1/3 the rate - pick mod 0 values
  [0 3 2 2 0 1]
3.D resample at 1/3 the rate - pick mod 1 values
  [1 1 2 2 1 0]
  resample at 1/3 the rate - pick mod 2 values
  [3 1 2 1 2 0]

  Picking different samples gives very different signals.
So the width of the kernel was not enough for 1/3
downsampling.


Question #4:
4. A
  1/25  | 1 1 1 1 1 |
        | 1 1 1 1 1 |
        | 1 1 1 1 1 |
        | 1 1 1 1 1 |
        | 1 1 1 1 1 |
4.B
  1/256 | 1 4  6  4  1 |
        | 4 16 24 16 4 |
        | 6 24 36 24 6 |
        | 4 16 24 16 4 |
        | 1 4  6  4  1 |
4.C
  1/4   |  1 -1  2 -1  1 |
        | -1  1 -2  1 -1 |
        |  2 -2  4 -2  2 |
        | -1  1 -2  1 -1 |
        |  1 -1  2 -1  1 |

4.D Complexity of doing it in 2D
  = O( M x M x N x N ) = O(M^4) if M >> N
4.E Complexity of doing it as 2 1D operations
  = O( M x M x N + M x M x N  ) = O(M x M x N) = O(M^3)


Question #5:
5. 
  A = (255,192,64,127)
  B = (0,255,255,255)
  C = (0,255,255,192)
  
  Formula for over Cx = Aa Ca + ( 1 - Aa ) Ab Cb;
  Formula for atop Cx = Aa Ca Ab + ( 1 - Aa ) Ab Cb

5.A   A over B
  R = ( 127 * 255 * 255 + ( 255 - 127 ) * 255 * 0    ) / ( 255 * 255 ) = 127
  G = ( 127 * 192 * 255 + ( 255 - 127 ) * 255 * 255  ) / ( 255 * 255 ) = 223
  B = ( 127 * 64  * 255 + ( 255 - 127 ) * 255 * 255  ) / ( 255 * 255 ) = 159
  A = ( 127 + 255 - 127 * 255 / 255 ) = 255
    => (127,223,159,255)
5.B   B over A
  R = ( 255 * 0   * 255 + ( 255 - 255 ) * 197 * 255  ) / ( 255 * 255 ) = 0
  G = ( 255 * 255 * 255 + ( 255 - 255 ) * 197 * 192  ) / ( 255 * 255 ) = 255
  B = ( 255 * 255 * 255 + ( 255 - 255 ) * 197 * 64   ) / ( 255 * 255 ) = 255
  A = ( 255 + 127 - 127 * 255 / 255 ) = 255
    => (0,255,255,255)
5.C   A over C
  R = ( 127 * 255 * 255 + ( 255 - 127 ) * 192 * 0    ) / ( 255 * 255 ) = 127
  G = ( 127 * 192 * 255 + ( 255 - 127 ) * 192 * 255  ) / ( 255 * 255 ) = 192
  B = ( 127 * 64  * 255 + ( 255 - 127 ) * 192 * 255  ) / ( 255 * 255 ) = 128
  A = ( 127 + 192 - 127 * 192 / 255 ) = 224
    => (127,192,128,224)
5.D   C over A
  R = ( 192 * 0   * 255 + ( 255 - 192 ) * 127 * 255  ) / ( 255 * 255 ) = 31
  G = ( 192 * 255 * 255 + ( 255 - 192 ) * 127 * 192  ) / ( 255 * 255 ) = 215
  B = ( 192 * 255 * 255 + ( 255 - 192 ) * 127 * 64   ) / ( 255 * 255 ) = 199
  A = ( 192 + 127 - 127 * 192 / 255 ) = 224
    => (31,215,199,224)
5.E   A atop B
  R = ( 127 * 255 * 255 + ( 255 - 127 ) * 255 * 0    ) / ( 255 * 255 ) = 127
  G = ( 127 * 192 * 255 + ( 255 - 127 ) * 255 * 255  ) / ( 255 * 255 ) = 223
  B = ( 127 * 64  * 255 + ( 255 - 127 ) * 255 * 255  ) / ( 255 * 255 ) = 159
  A = ( 127 * 255 + (255 - 127) * 255 ) / 255 = 255
    => (127,223,159,255)
5.F   A atop C
  R = ( 127 * 255 * 192 + ( 255 - 127 ) * 192 * 0    ) / ( 255 * 255 ) = 95
  G = ( 127 * 192 * 192 + ( 255 - 127 ) * 192 * 255  ) / ( 255 * 255 ) = 168
  B = ( 127 * 64  * 192 + ( 255 - 127 ) * 192 * 255  ) / ( 255 * 255 ) = 120
  A = ( 127 * 192 + (255 - 127) * 192 ) / 255 = 192
    => (95,168,120,192)
5.G   C atop A
  R = ( 192 * 0   * 127 + ( 255 - 192 ) * 127 * 255  ) / ( 255 * 255 ) = 31
  G = ( 192 * 255 * 127 + ( 255 - 192 ) * 127 * 192  ) / ( 255 * 255 ) = 119
  B = ( 192 * 255 * 127 + ( 255 - 192 ) * 127 * 64   ) / ( 255 * 255 ) = 103
  A = ( 192 * 127 + (255 - 192) * 127 ) / 255 = 127
    => (31,119,103,127)